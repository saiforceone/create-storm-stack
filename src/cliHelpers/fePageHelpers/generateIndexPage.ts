/**
 * @author SaiForceOne
 * @description functionality related to building index page components for the
 * frontend of a STRM Stack project
 */

// STRM Stack Imports
import FrontendOpt = STRMStackCLI.FrontendOpt;
import { LocaleManager } from '../localeManager.js';
import { getStandardImports } from './feHelperUtils.js';

// Helpers

/**
 * @function getIndexBuilder
 * @description Returns the appropriate index page builder which when run, returns
 * a string representation of the page component which can then be written to the
 * filesystem
 * @param frontendOpt
 * @param componentName
 * @returns {() => string}
 * */
function getIndexBuilder(
  frontendOpt: FrontendOpt,
  componentName: string
): () => string {
  const localeData = LocaleManager.getInstance().getLocaleData();
  const INDEX_BUILDERS: Record<FrontendOpt, () => string> = {
    lit: () => 'lit template placeholder', // todo: implement this
    vue: () => 'vue template placeholder', // todo: implement this
    react: () => {
      return `// Generated by the ${
        localeData.misc.STORM_BRANDED
      } ${new Date().toLocaleDateString()}
// core imports
${getStandardImports(frontendOpt)}

/**
 * @function Index
 * @description Autogenerated index page component for ${componentName}
 */
function Index(): React.ReactElement {
  return (
    <div className="p-2">
      <h1 className="text-4xl font-heading">${componentName} Index Page</h1>
      <p>Autogenerated by the ${localeData.misc.STORM_BRANDED}</p>
      <h2 className="text-2xl font-bold font-heading">What to do next</h2>
      <ul>
        <li>edit the corresponding model file in <b>strm_models/${componentName.toLowerCase()}.py</b></li>
        <li>edit the corresponding controller file in <b>strm_controllers/${componentName.toLowerCase()}_controller.py</b></li>
      </ul>
    </div>
  );
}
 
export default Index;
`;
    },
  };

  return INDEX_BUILDERS[frontendOpt];
}

/**
 * @function generateIndexPage
 * @description Given a frontend option specified by frontendOpt, generates an
 * index page (starter) specific to the frontend option with instructions on
 * what to do next as a string to be written to the filesystem by another function.
 * @param {FrontendOpt} frontendOpt frontend option that determines which index
 * page 'template' should be used
 * @param {string} componentName The name of the component
 * @returns {string} the page component as a string
 */
export function generateIndexPage(
  frontendOpt: FrontendOpt,
  componentName: string
): string {
  return getIndexBuilder(frontendOpt, componentName)();
}
